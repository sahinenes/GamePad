
GamePad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000450  000004e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800102  00800102  000004e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9b  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098d  00000000  00000000  000013a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d7  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050f  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001af  00000000  00000000  00002a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002bfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

00000068 <__KP_Map>:
  68:	31 32 33 41 34 35 36 42 37 38 39 43 45 30 46 44     123A456B789CE0FD

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e0 e5       	ldi	r30, 0x50	; 80
  8c:	f4 e0       	ldi	r31, 0x04	; 4
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	a2 e0       	ldi	r26, 0x02	; 2
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	a5 33       	cpi	r26, 0x35	; 53
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
  ae:	0c 94 26 02 	jmp	0x44c	; 0x44c <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <ToggleRC>:

//Toggle all keypad pins. 
static void ToggleRC(void)
{
	//Toggle pin mode (Inputs <-> Outputs)
	PinModeToggle(Keypad_R0);
  b6:	8a b1       	in	r24, 0x0a	; 10
  b8:	64 e0       	ldi	r22, 0x04	; 4
  ba:	86 27       	eor	r24, r22
  bc:	8a b9       	out	0x0a, r24	; 10
	PinModeToggle(Keypad_R1);
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	58 e0       	ldi	r21, 0x08	; 8
  c2:	85 27       	eor	r24, r21
  c4:	8a b9       	out	0x0a, r24	; 10
	PinModeToggle(Keypad_R2);
  c6:	8a b1       	in	r24, 0x0a	; 10
  c8:	40 e1       	ldi	r20, 0x10	; 16
  ca:	84 27       	eor	r24, r20
  cc:	8a b9       	out	0x0a, r24	; 10
	#if (__Keypad_Rows == 4)
		PinModeToggle(Keypad_R3);
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	30 e2       	ldi	r19, 0x20	; 32
  d2:	83 27       	eor	r24, r19
  d4:	8a b9       	out	0x0a, r24	; 10
	#endif
	PinModeToggle(Keypad_C0);
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	20 e4       	ldi	r18, 0x40	; 64
  da:	82 27       	eor	r24, r18
  dc:	8a b9       	out	0x0a, r24	; 10
	PinModeToggle(Keypad_C1);
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 58       	subi	r24, 0x80	; 128
  e2:	8a b9       	out	0x0a, r24	; 10
	PinModeToggle(Keypad_C2);
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	89 27       	eor	r24, r25
  ea:	84 b9       	out	0x04, r24	; 4
	#if (__Keypad_Columns == 4)
		PinModeToggle(Keypad_C3);
  ec:	74 b1       	in	r23, 0x04	; 4
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	78 27       	eor	r23, r24
  f2:	74 b9       	out	0x04, r23	; 4
	#endif
	
	//Toggle pin level (High <-> Low)
	DigitalLevelToggle(Keypad_R0);
  f4:	7b b1       	in	r23, 0x0b	; 11
  f6:	67 27       	eor	r22, r23
  f8:	6b b9       	out	0x0b, r22	; 11
	DigitalLevelToggle(Keypad_R1);
  fa:	6b b1       	in	r22, 0x0b	; 11
  fc:	56 27       	eor	r21, r22
  fe:	5b b9       	out	0x0b, r21	; 11
	DigitalLevelToggle(Keypad_R2);
 100:	5b b1       	in	r21, 0x0b	; 11
 102:	45 27       	eor	r20, r21
 104:	4b b9       	out	0x0b, r20	; 11
	#if (__Keypad_Rows == 4)
		DigitalLevelToggle(Keypad_R3);
 106:	4b b1       	in	r20, 0x0b	; 11
 108:	34 27       	eor	r19, r20
 10a:	3b b9       	out	0x0b, r19	; 11
	#endif
	DigitalLevelToggle(Keypad_C0);
 10c:	3b b1       	in	r19, 0x0b	; 11
 10e:	23 27       	eor	r18, r19
 110:	2b b9       	out	0x0b, r18	; 11
	DigitalLevelToggle(Keypad_C1);
 112:	2b b1       	in	r18, 0x0b	; 11
 114:	20 58       	subi	r18, 0x80	; 128
 116:	2b b9       	out	0x0b, r18	; 11
	DigitalLevelToggle(Keypad_C2);
 118:	25 b1       	in	r18, 0x05	; 5
 11a:	92 27       	eor	r25, r18
 11c:	95 b9       	out	0x05, r25	; 5
	#if (__Keypad_Columns == 4)
		DigitalLevelToggle(Keypad_C3);
 11e:	95 b1       	in	r25, 0x05	; 5
 120:	89 27       	eor	r24, r25
 122:	85 b9       	out	0x05, r24	; 5
 124:	08 95       	ret

00000126 <KP_Setup>:
//----- Functions ------------------------//
//Setup for keypad. 
void KP_Setup(void)
{
	//Input rows
	PinMode(Keypad_R0, Input);
 126:	8a b1       	in	r24, 0x0a	; 10
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	8a b9       	out	0x0a, r24	; 10
	PinMode(Keypad_R1, Input);
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	87 7f       	andi	r24, 0xF7	; 247
 130:	8a b9       	out	0x0a, r24	; 10
	PinMode(Keypad_R2, Input);
 132:	8a b1       	in	r24, 0x0a	; 10
 134:	8f 7e       	andi	r24, 0xEF	; 239
 136:	8a b9       	out	0x0a, r24	; 10
	#if (__Keypad_Rows == 4)
		PinMode(Keypad_R3, Input);
 138:	8a b1       	in	r24, 0x0a	; 10
 13a:	8f 7d       	andi	r24, 0xDF	; 223
 13c:	8a b9       	out	0x0a, r24	; 10
	#endif
	
	//Output columns
	PinMode(Keypad_C0, Output);
 13e:	8a b1       	in	r24, 0x0a	; 10
 140:	80 64       	ori	r24, 0x40	; 64
 142:	8a b9       	out	0x0a, r24	; 10
	PinMode(Keypad_C1, Output);
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	80 68       	ori	r24, 0x80	; 128
 148:	8a b9       	out	0x0a, r24	; 10
	PinMode(Keypad_C2, Output);
 14a:	84 b1       	in	r24, 0x04	; 4
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	84 b9       	out	0x04, r24	; 4
	#if (__Keypad_Columns == 4)
		PinMode(Keypad_C3, Output);
 150:	84 b1       	in	r24, 0x04	; 4
 152:	82 60       	ori	r24, 0x02	; 2
 154:	84 b9       	out	0x04, r24	; 4
	#endif
	
	//Pull-up resistor rows
	DigitalWrite(Keypad_R0, High);
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	84 60       	ori	r24, 0x04	; 4
 15a:	8b b9       	out	0x0b, r24	; 11
	DigitalWrite(Keypad_R1, High);
 15c:	8b b1       	in	r24, 0x0b	; 11
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	8b b9       	out	0x0b, r24	; 11
	DigitalWrite(Keypad_R2, High);
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	80 61       	ori	r24, 0x10	; 16
 166:	8b b9       	out	0x0b, r24	; 11
	#if (__Keypad_Rows == 4)
		DigitalWrite(Keypad_R3, High);
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 62       	ori	r24, 0x20	; 32
 16c:	8b b9       	out	0x0b, r24	; 11
	#endif
	
	//Low level outputs
	DigitalWrite(Keypad_C0, Low);
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	8f 7b       	andi	r24, 0xBF	; 191
 172:	8b b9       	out	0x0b, r24	; 11
	DigitalWrite(Keypad_C1, Low);
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	8f 77       	andi	r24, 0x7F	; 127
 178:	8b b9       	out	0x0b, r24	; 11
	DigitalWrite(Keypad_C2, Low);
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	85 b9       	out	0x05, r24	; 5
	#if (__Keypad_Columns == 4)
		DigitalWrite(Keypad_C3, Low);
 180:	85 b1       	in	r24, 0x05	; 5
 182:	8d 7f       	andi	r24, 0xFD	; 253
 184:	85 b9       	out	0x05, r24	; 5
 186:	08 95       	ret

00000188 <KP_GetKey>:
		i = 0;
}

//Read key from keypad without debounce. Returns Key_0 to Key_F. 
enum KeypadKey_t KP_GetKey(void)
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	00 d0       	rcall	.+0      	; 0x18e <KP_GetKey+0x6>
 18e:	00 d0       	rcall	.+0      	; 0x190 <KP_GetKey+0x8>
 190:	1f 92       	push	r1
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
	volatile enum KeypadKey_t key = Key_None;
 196:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t r, c;
	r = c = 0;
 198:	1b 82       	std	Y+3, r1	; 0x03
 19a:	1a 82       	std	Y+2, r1	; 0x02
}

//Read keypad's rows. 
static inline uint8_t ReadRows(void)
{
	volatile uint8_t port = 0xF0;
 19c:	80 ef       	ldi	r24, 0xF0	; 240
 19e:	8d 83       	std	Y+5, r24	; 0x05

	//Read each pin to its respected place
	port |= DigitalRead(Keypad_R0);
 1a0:	89 b1       	in	r24, 0x09	; 9
 1a2:	82 fb       	bst	r24, 2
 1a4:	99 27       	eor	r25, r25
 1a6:	90 f9       	bld	r25, 0
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	89 2b       	or	r24, r25
 1ac:	8d 83       	std	Y+5, r24	; 0x05
	port |= DigitalRead(Keypad_R1)<<1;
 1ae:	4b 9b       	sbis	0x09, 3	; 9
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <KP_GetKey+0x2e>
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <KP_GetKey+0x30>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ba:	89 2b       	or	r24, r25
 1bc:	8d 83       	std	Y+5, r24	; 0x05
	port |= DigitalRead(Keypad_R2)<<2;
 1be:	4c 9b       	sbis	0x09, 4	; 9
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <KP_GetKey+0x3e>
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <KP_GetKey+0x40>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ca:	89 2b       	or	r24, r25
 1cc:	8d 83       	std	Y+5, r24	; 0x05
	#if (__Keypad_Rows == 4)
		port |= DigitalRead(Keypad_R3)<<3;
 1ce:	4d 9b       	sbis	0x09, 5	; 9
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <KP_GetKey+0x4e>
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <KP_GetKey+0x50>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	9d 81       	ldd	r25, Y+5	; 0x05
 1da:	89 2b       	or	r24, r25
 1dc:	8d 83       	std	Y+5, r24	; 0x05
	#else
		port = BitSet(port, 3);
	#endif
	
	return port;
 1de:	8d 81       	ldd	r24, Y+5	; 0x05
	volatile uint8_t r, c;
	r = c = 0;
	
	//1. Check if button is pressed
	//Get rows' status
	r = ~ReadRows();
 1e0:	80 95       	com	r24
 1e2:	8a 83       	std	Y+2, r24	; 0x02
	if (r)
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	88 23       	and	r24, r24
 1e8:	09 f4       	brne	.+2      	; 0x1ec <KP_GetKey+0x64>
 1ea:	62 c0       	rjmp	.+196    	; 0x2b0 <KP_GetKey+0x128>
	{
		//Get columns' status
		ToggleRC();
 1ec:	0e 94 5b 00 	call	0xb6	; 0xb6 <ToggleRC>
}

//Read keypad's columns. 
static inline uint8_t ReadColumns(void)
{
	volatile uint8_t port = 0x0F;
 1f0:	8f e0       	ldi	r24, 0x0F	; 15
 1f2:	8c 83       	std	Y+4, r24	; 0x04

	//Read each pin to its respected place
	port |= DigitalRead(Keypad_C0)<<4;
 1f4:	4e 9b       	sbis	0x09, 6	; 9
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <KP_GetKey+0x74>
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <KP_GetKey+0x76>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	89 2b       	or	r24, r25
 202:	8c 83       	std	Y+4, r24	; 0x04
	port |= DigitalRead(Keypad_C1)<<5;
 204:	4f 9b       	sbis	0x09, 7	; 9
 206:	02 c0       	rjmp	.+4      	; 0x20c <KP_GetKey+0x84>
 208:	80 e2       	ldi	r24, 0x20	; 32
 20a:	01 c0       	rjmp	.+2      	; 0x20e <KP_GetKey+0x86>
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	9c 81       	ldd	r25, Y+4	; 0x04
 210:	89 2b       	or	r24, r25
 212:	8c 83       	std	Y+4, r24	; 0x04
	port |= DigitalRead(Keypad_C2)<<6;
 214:	18 9b       	sbis	0x03, 0	; 3
 216:	02 c0       	rjmp	.+4      	; 0x21c <KP_GetKey+0x94>
 218:	80 e4       	ldi	r24, 0x40	; 64
 21a:	01 c0       	rjmp	.+2      	; 0x21e <KP_GetKey+0x96>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	9c 81       	ldd	r25, Y+4	; 0x04
 220:	89 2b       	or	r24, r25
 222:	8c 83       	std	Y+4, r24	; 0x04
	#if (__Keypad_Columns == 4)
		port |= DigitalRead(Keypad_C3)<<7;
 224:	19 9b       	sbis	0x03, 1	; 3
 226:	02 c0       	rjmp	.+4      	; 0x22c <KP_GetKey+0xa4>
 228:	80 e8       	ldi	r24, 0x80	; 128
 22a:	01 c0       	rjmp	.+2      	; 0x22e <KP_GetKey+0xa6>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	89 2b       	or	r24, r25
 232:	8c 83       	std	Y+4, r24	; 0x04
	#else
		port = BitSet(port, 7);
	#endif
	
	return port;
 234:	8c 81       	ldd	r24, Y+4	; 0x04
	r = ~ReadRows();
	if (r)
	{
		//Get columns' status
		ToggleRC();
		c = ~ReadColumns();
 236:	80 95       	com	r24
 238:	8b 83       	std	Y+3, r24	; 0x03
		ToggleRC();
 23a:	0e 94 5b 00 	call	0xb6	; 0xb6 <ToggleRC>
		
		//2. Find the row
		if (BitCheck(r, 0))
 23e:	8a 81       	ldd	r24, Y+2	; 0x02
 240:	80 ff       	sbrs	r24, 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <KP_GetKey+0xc0>
			r = 0;
 244:	1a 82       	std	Y+2, r1	; 0x02
 246:	11 c0       	rjmp	.+34     	; 0x26a <KP_GetKey+0xe2>
		else if (BitCheck(r, 1))
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	81 ff       	sbrs	r24, 1
 24c:	03 c0       	rjmp	.+6      	; 0x254 <KP_GetKey+0xcc>
			r = 1;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	8a 83       	std	Y+2, r24	; 0x02
 252:	0b c0       	rjmp	.+22     	; 0x26a <KP_GetKey+0xe2>
		else if (BitCheck(r, 2))
 254:	8a 81       	ldd	r24, Y+2	; 0x02
 256:	82 ff       	sbrs	r24, 2
 258:	03 c0       	rjmp	.+6      	; 0x260 <KP_GetKey+0xd8>
		r = 2;
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	8a 83       	std	Y+2, r24	; 0x02
 25e:	05 c0       	rjmp	.+10     	; 0x26a <KP_GetKey+0xe2>
		#if (__Keypad_Rows ==  4)
			else if (BitCheck(r, 3))
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	83 ff       	sbrs	r24, 3
 264:	02 c0       	rjmp	.+4      	; 0x26a <KP_GetKey+0xe2>
				r = 3;
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	8a 83       	std	Y+2, r24	; 0x02
		#endif
		
		//3. Find the column
		if (BitCheck(c, 4))
 26a:	8b 81       	ldd	r24, Y+3	; 0x03
 26c:	84 ff       	sbrs	r24, 4
 26e:	02 c0       	rjmp	.+4      	; 0x274 <KP_GetKey+0xec>
			c = 0;
 270:	1b 82       	std	Y+3, r1	; 0x03
 272:	11 c0       	rjmp	.+34     	; 0x296 <KP_GetKey+0x10e>
		else if (BitCheck(c, 5))
 274:	8b 81       	ldd	r24, Y+3	; 0x03
 276:	85 ff       	sbrs	r24, 5
 278:	03 c0       	rjmp	.+6      	; 0x280 <KP_GetKey+0xf8>
			c = 1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	8b 83       	std	Y+3, r24	; 0x03
 27e:	0b c0       	rjmp	.+22     	; 0x296 <KP_GetKey+0x10e>
		else if (BitCheck(c, 6))
 280:	8b 81       	ldd	r24, Y+3	; 0x03
 282:	86 ff       	sbrs	r24, 6
 284:	03 c0       	rjmp	.+6      	; 0x28c <KP_GetKey+0x104>
			c = 2;
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	8b 83       	std	Y+3, r24	; 0x03
 28a:	05 c0       	rjmp	.+10     	; 0x296 <KP_GetKey+0x10e>
		#if (__Keypad_Columns == 4)
			else if (BitCheck(c, 7))
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	88 23       	and	r24, r24
 290:	14 f4       	brge	.+4      	; 0x296 <KP_GetKey+0x10e>
				c = 3;
 292:	83 e0       	ldi	r24, 0x03	; 3
 294:	8b 83       	std	Y+3, r24	; 0x03
		#endif
		
		//Read key from keypad map
		key = pgm_read_byte(&(__KP_Map[r][c]));
 296:	ea 81       	ldd	r30, Y+2	; 0x02
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
 29c:	ee 0f       	add	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	ee 0f       	add	r30, r30
 2a2:	ff 1f       	adc	r31, r31
 2a4:	e8 0f       	add	r30, r24
 2a6:	f1 1d       	adc	r31, r1
 2a8:	e8 59       	subi	r30, 0x98	; 152
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	e4 91       	lpm	r30, Z
 2ae:	e9 83       	std	Y+1, r30	; 0x01
	}
	
	return key;
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <main>:
 


int main(void)
{
  init_uart(9600);
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	95 e2       	ldi	r25, 0x25	; 37
 2c6:	0e 94 88 01 	call	0x310	; 0x310 <init_uart>
  key=Key_None;
 2ca:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
  KP_Setup();						
 2ce:	0e 94 93 00 	call	0x126	; 0x126 <KP_Setup>
   
   
    while (1) 
    {
		
		  key = KP_GetKey();
 2d2:	0e 94 c4 00 	call	0x188	; 0x188 <KP_GetKey>
 2d6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		  
		  //If key is pressed
		  if (key != Key_None )
 2da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2de:	88 23       	and	r24, r24
 2e0:	a1 f0       	breq	.+40     	; 0x30a <main+0x48>
		  {
			 
			  int new_value=key-48;
 2e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2e6:	90 e0       	ldi	r25, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2e8:	4a e0       	ldi	r20, 0x0A	; 10
 2ea:	63 e0       	ldi	r22, 0x03	; 3
 2ec:	71 e0       	ldi	r23, 0x01	; 1
 2ee:	c0 97       	sbiw	r24, 0x30	; 48
 2f0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__itoa_ncheck>
			  itoa(new_value,str,10);
			  send_uart(str);
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 a3 01 	call	0x346	; 0x346 <send_uart>
			  send_uart("\n");
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 a3 01 	call	0x346	; 0x346 <send_uart>
			  key=Key_None;
 304:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 308:	e4 cf       	rjmp	.-56     	; 0x2d2 <main+0x10>
			 
		  }
		  else
		  {
			  key=Key_None;
 30a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 30e:	e1 cf       	rjmp	.-62     	; 0x2d2 <main+0x10>

00000310 <init_uart>:
#include <avr/io.h>7


void init_uart(int baud)
{
	uint16_t baudRate=F_CPU/baud/16-1;
 310:	9c 01       	movw	r18, r24
 312:	99 0f       	add	r25, r25
 314:	44 0b       	sbc	r20, r20
 316:	55 0b       	sbc	r21, r21
 318:	60 e4       	ldi	r22, 0x40	; 64
 31a:	72 e4       	ldi	r23, 0x42	; 66
 31c:	8f e0       	ldi	r24, 0x0F	; 15
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 b0 01 	call	0x360	; 0x360 <__divmodsi4>
 324:	21 50       	subi	r18, 0x01	; 1
 326:	31 09       	sbc	r19, r1
	UBRR0H=(baudRate>>8);
 328:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=baudRate;
 32c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0);
 330:	e1 ec       	ldi	r30, 0xC1	; 193
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	88 61       	ori	r24, 0x18	; 24
 338:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
 33a:	e2 ec       	ldi	r30, 0xC2	; 194
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	86 60       	ori	r24, 0x06	; 6
 342:	80 83       	st	Z, r24
 344:	08 95       	ret

00000346 <send_uart>:
	
}
void send_uart( char *mesaj)
{
 346:	fc 01       	movw	r30, r24
	while(*mesaj!='\0')
 348:	07 c0       	rjmp	.+14     	; 0x358 <send_uart+0x12>
	{
		while(!(UCSR0A & (1<<UDRE0)));
 34a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 34e:	95 ff       	sbrs	r25, 5
 350:	fc cf       	rjmp	.-8      	; 0x34a <send_uart+0x4>
		UDR0=*mesaj;
 352:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		mesaj++;
 356:	31 96       	adiw	r30, 0x01	; 1
	UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
	
}
void send_uart( char *mesaj)
{
	while(*mesaj!='\0')
 358:	80 81       	ld	r24, Z
 35a:	81 11       	cpse	r24, r1
 35c:	f6 cf       	rjmp	.-20     	; 0x34a <send_uart+0x4>
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0=*mesaj;
		mesaj++;
	}

}
 35e:	08 95       	ret

00000360 <__divmodsi4>:
 360:	05 2e       	mov	r0, r21
 362:	97 fb       	bst	r25, 7
 364:	1e f4       	brtc	.+6      	; 0x36c <__divmodsi4+0xc>
 366:	00 94       	com	r0
 368:	0e 94 c7 01 	call	0x38e	; 0x38e <__negsi2>
 36c:	57 fd       	sbrc	r21, 7
 36e:	07 d0       	rcall	.+14     	; 0x37e <__divmodsi4_neg2>
 370:	0e 94 cf 01 	call	0x39e	; 0x39e <__udivmodsi4>
 374:	07 fc       	sbrc	r0, 7
 376:	03 d0       	rcall	.+6      	; 0x37e <__divmodsi4_neg2>
 378:	4e f4       	brtc	.+18     	; 0x38c <__divmodsi4_exit>
 37a:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__negsi2>

0000037e <__divmodsi4_neg2>:
 37e:	50 95       	com	r21
 380:	40 95       	com	r20
 382:	30 95       	com	r19
 384:	21 95       	neg	r18
 386:	3f 4f       	sbci	r19, 0xFF	; 255
 388:	4f 4f       	sbci	r20, 0xFF	; 255
 38a:	5f 4f       	sbci	r21, 0xFF	; 255

0000038c <__divmodsi4_exit>:
 38c:	08 95       	ret

0000038e <__negsi2>:
 38e:	90 95       	com	r25
 390:	80 95       	com	r24
 392:	70 95       	com	r23
 394:	61 95       	neg	r22
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	8f 4f       	sbci	r24, 0xFF	; 255
 39a:	9f 4f       	sbci	r25, 0xFF	; 255
 39c:	08 95       	ret

0000039e <__udivmodsi4>:
 39e:	a1 e2       	ldi	r26, 0x21	; 33
 3a0:	1a 2e       	mov	r1, r26
 3a2:	aa 1b       	sub	r26, r26
 3a4:	bb 1b       	sub	r27, r27
 3a6:	fd 01       	movw	r30, r26
 3a8:	0d c0       	rjmp	.+26     	; 0x3c4 <__udivmodsi4_ep>

000003aa <__udivmodsi4_loop>:
 3aa:	aa 1f       	adc	r26, r26
 3ac:	bb 1f       	adc	r27, r27
 3ae:	ee 1f       	adc	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	a2 17       	cp	r26, r18
 3b4:	b3 07       	cpc	r27, r19
 3b6:	e4 07       	cpc	r30, r20
 3b8:	f5 07       	cpc	r31, r21
 3ba:	20 f0       	brcs	.+8      	; 0x3c4 <__udivmodsi4_ep>
 3bc:	a2 1b       	sub	r26, r18
 3be:	b3 0b       	sbc	r27, r19
 3c0:	e4 0b       	sbc	r30, r20
 3c2:	f5 0b       	sbc	r31, r21

000003c4 <__udivmodsi4_ep>:
 3c4:	66 1f       	adc	r22, r22
 3c6:	77 1f       	adc	r23, r23
 3c8:	88 1f       	adc	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	1a 94       	dec	r1
 3ce:	69 f7       	brne	.-38     	; 0x3aa <__udivmodsi4_loop>
 3d0:	60 95       	com	r22
 3d2:	70 95       	com	r23
 3d4:	80 95       	com	r24
 3d6:	90 95       	com	r25
 3d8:	9b 01       	movw	r18, r22
 3da:	ac 01       	movw	r20, r24
 3dc:	bd 01       	movw	r22, r26
 3de:	cf 01       	movw	r24, r30
 3e0:	08 95       	ret

000003e2 <__itoa_ncheck>:
 3e2:	bb 27       	eor	r27, r27
 3e4:	4a 30       	cpi	r20, 0x0A	; 10
 3e6:	31 f4       	brne	.+12     	; 0x3f4 <__itoa_ncheck+0x12>
 3e8:	99 23       	and	r25, r25
 3ea:	22 f4       	brpl	.+8      	; 0x3f4 <__itoa_ncheck+0x12>
 3ec:	bd e2       	ldi	r27, 0x2D	; 45
 3ee:	90 95       	com	r25
 3f0:	81 95       	neg	r24
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__utoa_common>

000003f8 <__utoa_ncheck>:
 3f8:	bb 27       	eor	r27, r27

000003fa <__utoa_common>:
 3fa:	fb 01       	movw	r30, r22
 3fc:	55 27       	eor	r21, r21
 3fe:	aa 27       	eor	r26, r26
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	aa 1f       	adc	r26, r26
 406:	a4 17       	cp	r26, r20
 408:	10 f0       	brcs	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	a4 1b       	sub	r26, r20
 40c:	83 95       	inc	r24
 40e:	50 51       	subi	r21, 0x10	; 16
 410:	b9 f7       	brne	.-18     	; 0x400 <__EEPROM_REGION_LENGTH__>
 412:	a0 5d       	subi	r26, 0xD0	; 208
 414:	aa 33       	cpi	r26, 0x3A	; 58
 416:	08 f0       	brcs	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	a9 5d       	subi	r26, 0xD9	; 217
 41a:	a1 93       	st	Z+, r26
 41c:	00 97       	sbiw	r24, 0x00	; 0
 41e:	79 f7       	brne	.-34     	; 0x3fe <__utoa_common+0x4>
 420:	b1 11       	cpse	r27, r1
 422:	b1 93       	st	Z+, r27
 424:	11 92       	st	Z+, r1
 426:	cb 01       	movw	r24, r22
 428:	0c 94 16 02 	jmp	0x42c	; 0x42c <strrev>

0000042c <strrev>:
 42c:	dc 01       	movw	r26, r24
 42e:	fc 01       	movw	r30, r24
 430:	67 2f       	mov	r22, r23
 432:	71 91       	ld	r23, Z+
 434:	77 23       	and	r23, r23
 436:	e1 f7       	brne	.-8      	; 0x430 <strrev+0x4>
 438:	32 97       	sbiw	r30, 0x02	; 2
 43a:	04 c0       	rjmp	.+8      	; 0x444 <strrev+0x18>
 43c:	7c 91       	ld	r23, X
 43e:	6d 93       	st	X+, r22
 440:	70 83       	st	Z, r23
 442:	62 91       	ld	r22, -Z
 444:	ae 17       	cp	r26, r30
 446:	bf 07       	cpc	r27, r31
 448:	c8 f3       	brcs	.-14     	; 0x43c <strrev+0x10>
 44a:	08 95       	ret

0000044c <_exit>:
 44c:	f8 94       	cli

0000044e <__stop_program>:
 44e:	ff cf       	rjmp	.-2      	; 0x44e <__stop_program>
